first_every_week_script = {
	ZZZ = {
		update_market = yes
	}

	# Allow suppressed TNO alerts to reappear
	every_country = {
		if = {
			limit = { is_ai = no }
			TNO_alert_suppression_weekly_tick = yes
		}
	}
}

first_every_month_script = {
	log = "[GetDateText]: [Root.GetName]: first_every_month_script"
	add_to_variable = { month_counter = 1 }
	if = {
		limit = {
			check_variable = {
				month_counter = 13
			}
		}
		set_variable = { month_counter = 1 }
		first_every_year_script = yes
	}
	add_manpower = -100 #Why? -Pacifica #I think its to keep Anarchy Island on 0 Recruit manpower IG - OPAsian

	ZZZ =  {
		add_to_variable = { econ_graph_month = 1 }
	}

	every_country = {
		set_variable = { total_pop_m = 0 }
		set_variable = { total_core_pop_m = 0 }
		every_owned_state = {
			set_temp_variable = { spm = state_population_k }
			divide_temp_variable = { spm = 1000 }
			add_to_variable = { PREV.total_pop_m = spm }
			if = {
				limit = { is_core_of = THIS }
				add_to_variable = { PREV.total_core_pop_m = spm }
			}
		}
		set_variable = { total_ncore_pop_m = total_pop_m }
		subtract_from_variable = { total_ncore_pop_m = total_core_pop_m }
	}
	if = {
		limit = {
			SCO = {
				has_country_flag = SCO_Election_Campaign_On
			}
		}
		SCO = {
			SCO_Get_Percentage_of_Vote_Highlands = yes
			SCO_Get_Percentage_of_Vote_Aberdeenshire = yes
			SCO_Get_Percentage_of_Vote_Lanark = yes
			SCO_Get_Percentage_of_Vote_Fife = yes
			SCO_Get_Percentage_of_Vote_Dumfries = yes
			SCO_Get_Percentage_of_Vote_Lothian = yes
			SCO_Get_Percentage_of_Vote_National = yes
			SCO_Get_Turnout_National = yes
		}
	}
	if = {
		limit = {
			NOT = {
				has_country_flag = IRE_NIC_Over
			}
		}
		IRE = {
			add_to_variable = {
				IRE_Groups_NIC_Corruption = IRE_Groups_NIC_Corruption_increase
			}
			IRE_Set_repression_effectiveness = yes
			clamp_variable = {
				var = IRE_Groups_NIC_Corruption
				min = 1
				max = 100
			}
			if = {
				limit = {
					check_variable = {
						IRE_Groups_NIC_Corruption > 59
					}
				}
				set_variable = { IRE_NIC_No_Terror = 82 }
				set_variable = { IRE_NIC_Terror = 6 }
			}
			else_if = {
				limit = {
					check_variable = {
						IRE_Groups_NIC_Corruption > 49
					}
				}
				set_variable = { IRE_NIC_No_Terror = 85 }
				set_variable = { IRE_NIC_Terror = 5 }
			}
			else_if = {
				limit = {
					check_variable = {
						IRE_Groups_NIC_Corruption > 39
					}
				}
				set_variable = { IRE_NIC_No_Terror = 88 }
				set_variable = { IRE_NIC_Terror = 4 }
			}
			else = {
				set_variable = { IRE_NIC_No_Terror = 91 }
				set_variable = { IRE_NIC_Terror = 3 }
			}
			random_list = {
				IRE_NIC_No_Terror = {
				}
				IRE_NIC_Terror = {
					country_event = {
						id = IRE_investigations.58
						days = 1
						random_days = 15
					}
				}
				IRE_NIC_Terror = {
					country_event = {
						id = IRE_investigations.59
						days = 1
						random_days = 15
					}
				}
				IRE_NIC_Terror = {
					country_event = {
						id = IRE_investigations.60
						days = 1
						random_days = 15
					}
				}
			}
			if = {
				limit = {
					check_variable = {
						ICG_Power > 89
					}
					check_variable = {
						ICG_Anger = 3
					}
					NOT = {
						has_country_flag = NIRA_troubles
					}
				}
				country_event = IRE_crisis.53
			}
			if = {
				limit = {
					check_variable = {
						UVF_Power > 89
					}
					check_variable = {
						UVF_Anger = 3
					}
					NOT = {
						has_country_flag = UVF_troubles
					}
				}
				country_event = IRE_crisis.52
			}

			if = {
				limit = {
					AND = {
						check_variable = {
							IRA_Power > 89
						}
						check_variable = {
							IRA_Anger = 3
						}
						NOT = {
							has_country_flag = SE_troubles
						}
					}
				}
				country_event = IRE_crisis.51
			}

			if = {
				limit = {
					OR = {
						AND = {
							check_variable = {
								ICG_Power < 30
							}
							has_country_flag = NIRA_troubles
						}
						AND = {
							check_variable = {
								ICG_Anger = 1
							}
							has_country_flag = NIRA_troubles
						}
					}
				}
				country_event = IRE_crisis.56
			}
			if = {
				limit = {
					OR = {
						AND = {
							check_variable = {
								UVF_Power < 30
							}
							has_country_flag = UVF_troubles
						}
						AND = {
							check_variable = {
								UVF_Anger = 1
							}
							has_country_flag = UVF_troubles
						}
					}
				}
				country_event = IRE_crisis.55
			}

			if = {
				limit = {
					OR = {
						AND = {
							check_variable = {
								IRA_Power < 30
							}
							has_country_flag = SE_troubles
						}
						AND = {
							check_variable = {
								IRA_Anger = 1
							}
							has_country_flag = SE_troubles
						}
					}
				}
				country_event = IRE_crisis.54
			}

		}
	}
	if = {
		limit = {
			country_exists = SCO
		}
		SCO = {
			add_to_variable = {
				SCO_English_Population_Percent = SCO_English_Population_Percent_c
			}
			add_to_variable = {
				SCO_English_Poverty_Percent = SCO_English_Poverty_Percent_c
			}
			add_to_variable = {
				SCO_English_Approval = SCO_English_Approval_c
			}
			SCO_English_Minority_CALC = yes
		}
	}
	if = {
		limit = {
			country_exists = IRE
		}
		IRE = {
			IRE_terrorism_stab_cost = yes
		}
	}
	if = {
		limit = {
			FAV = {
				exists = yes
			}
		}
		FAV = {
			set_variable = { FAVTotalAirDeployed = FAVBasicAirDeployed }
			add_to_variable = { FAVTotalAirDeployed = FAVAdvancedAirDeployed }
			set_variable = { FAVAirStrength = 0 }
			set_temp_variable = { FAVBasicStrength = 2 }
			set_temp_variable = { FAVAdvancedStrength = 5 }
			multiply_temp_variable = { FAVBasicStrength = FAVBasicAirDeployed }
			multiply_temp_variable = { FAVAdvancedStrength = FAVAdvancedAirDeployed }
			add_to_variable = { FAVAirStrength = FAVBasicStrength }
			add_to_variable = { FAVAirStrength = FAVAdvancedStrength }
		}
	}

	if = {
		limit = { country_exists = TOM }
		TOM = {
			if = {
				limit = { has_idea = TOM_idea_incompatible_army }
				TOM_Decrease_Idealism_low = yes
			}
			if = {
				limit = { has_idea = TOM_idea_incompatible_economy }
				TOM_Decrease_Idealism_low = yes
			}
			if = {
				limit = { has_idea = TOM_idea_political_crisis }
				TOM_Decrease_Idealism_low = yes
				TOM_Increase_Political_Outsiders_low = yes
			}
			if = {
				limit = { has_idea = TOM_idea_novosibirsk_conference }
				TOM_Increase_Idealism_low = yes
				TOM_Increase_Political_Outsiders_low = yes
			}
			if = {
				limit = { has_idea = TOM_idea_Bureau_of_integration }
				TOM_Decrease_Idealism_low = yes
				TOM_Decrease_Political_Outsiders_low = yes
			}
			if = {
				limit = { has_decision = TOM_The_Outsiders_Act }
				TOM_Increase_Idealism_low = yes
				TOM_Decrease_Political_Outsiders_low = yes
			}
			if = {
				limit = { has_country_flag = RUS_regional_stage }
				if = {
					limit = {
						check_variable = { TOM_Idealism_Value > 60 }
					}
					add_to_variable = { TOM_Idealism_Tracker = 1 }
				}
				else_if = {
					limit = {
						check_variable = { TOM_Idealism_Value < 40 }
					}
					add_to_variable = { TOM_Cynicism_Tracker = 1 }
				}
			}
			#############################
			if = {
				limit = { has_country_flag = TOM_started_megaproject }
				add_to_variable = { TOM_megaproject_progress = TOM_megaproject_monthly_progress }
				clamp_variable = { var = TOM_megaproject_progress min = 0 max = 100 }
				clamp_variable = { var = TOM_megaproject_monthly_progress min = 0 max = 2.5 }
			}
		}
	}

	if = {
		limit = {
			KOM = {
				exists = yes
				has_country_flag = KOM_EURASIAN_DREAM
				NOT = {
					has_country_flag = KOM_cancel_eurasia_mechanic
				}
			}
		}
		KOM = {
			if = {
				limit = {
					check_variable = { KOMEurasiaLegitimacy > 75 }
					NOT = {
						has_country_flag = KOM_EURASIAN_DEBATE
					}
				}
				country_event = {
					id = eurasianism.56
					days = 1
				}
			}
			if = {
				limit = {
					check_variable = { KOMEurasiaLegitimacy < 20 }
					NOT = {
						has_idea = KOM_eurasia_forever_1
					}
				}
				country_event = {
					id = eurasianism.70
					days = 1
				}
			}
			subtract_from_variable = { KOMEurasiaLegitimacy = 5 }
			clamp_variable = { var = KOMEurasiaLegitimacy min = 0 max = 100 }
		}
	}

	if = {
		limit = {
			KOM = {
				exists = yes
				AND = {
					has_country_flag = KOM_Stalina_Arrested
					has_country_flag = KOM_Bukharina_Arrested
				}
				NOT = {
					has_country_flag = KOM_prison_chain_started
				}
			}
		}
		KOM = {
			country_event = { id = komi.20 days = 180 random = 1000 }
		}
	}

	if = {
		limit = {
			KOM = {
				exists = yes
				has_government = esoteric_nazism
				has_country_flag = KOM_CLOCK_START_RUNNING
				NOT = { has_global_flag = russian_total_reunification }
			}
		}
		KOM = {
			add_to_variable = { KOM_tabby_time_accumulated = KOM_tabby_time_progress }
			if = {
				limit = {
					AND = {
						check_variable = { KOM_tabby_time_accumulated > 59 }
						NOT = {
							check_variable = { KOM_tabby_time_hours > 23 }
						}
					}
				}
				set_variable = { KOM_tabby_time_accumulated = 0 }
				add_to_variable = { KOM_tabby_time_hours = 1 }
				KOM_tabby_fire_journal_event = yes
			}
			if = {
				limit = {
					AND = {
						check_variable = { KOM_tabby_time_accumulated < -59 }
						NOT = {
							check_variable = { KOM_tabby_time_hours < 2 }
						}
					}
				}
				set_variable = { KOM_tabby_time_accumulated = 0 }
				subtract_from_variable = { KOM_tabby_time_hours = 1 }
			}
		}
	}
	PRC = {
		add_to_variable = { PRC_Army_Modernization = PRC_Army_Modernization_monthly_change }
		PRC_monthly_decay_estates = yes
	}

	if = {
		limit = {
			SAM = {
				exists = yes
				has_country_flag = SAM_web_of_tensions
			}
		}
		SAM = {
			if = {
				limit = {
					check_variable = { SAM_military_tension < 20 }
				}
				add_to_variable = { SAM_military_tension = 1 }
			}
			if = {
				limit = {
					check_variable = { SAM_military_tension < 40 }
				}
				add_to_variable = { SAM_military_tension = 1 }
			}
			if = {
				limit = {
					check_variable = { SAM_military_tension < 50 }
				}
				add_to_variable = { SAM_military_tension = 1 }
			}
			if = {
				limit = {
					check_variable = { SAM_civilian_tension < 20 }
				}
				add_to_variable = { SAM_civilian_tension = 1 }
			}
			if = {
				limit = {
					check_variable = { SAM_civilian_tension < 40 }
				}
				add_to_variable = { SAM_civilian_tension = 1 }
			}
			if = {
				limit = {
					check_variable = { SAM_civilian_tension < 50 }
				}
				add_to_variable = { SAM_civilian_tension = 1 }
			}
			if = {
				limit = {
					check_variable = { SAM_inner_circle_tension < 20 }
				}
				add_to_variable = { SAM_inner_circle_tension = 1 }
			}
			if = {
				limit = {
					check_variable = { SAM_inner_circle_tension < 40 }
				}
				add_to_variable = { SAM_inner_circle_tension = 1 }
			}
			if = {
				limit = {
					check_variable = { SAM_inner_circle_tension < 50 }
				}
				add_to_variable = { SAM_inner_circle_tension = 1 }
			}
			clamp_variable = { var = SAM_military_tension min = 0 max = 100 }
			clamp_variable = { var = SAM_civilian_tension min = 0 max = 100 }
			clamp_variable = { var = SAM_inner_circle_tension min = 0 max = 100 }
			SAM_change_military_tension_spirit = yes
			SAM_change_civilian_tension_spirit = yes
			SAM_change_inner_circle_tension_spirit = yes
		}
	}

	if = {
		limit = {
			country_exists = WSR
		}
		WSR = {
			RUS_calculate_prestige_value = yes
		}
	}
	if = {
		limit = {
			country_exists = WSB
		}
		WSB = {
			RUS_calculate_prestige_value = yes
		}
	}
	if = {
		limit = {
			country_exists = CSB
		}
		CSB = {
			RUS_calculate_prestige_value = yes
		}
	}
	if = {
		limit = {
			country_exists = FST
		}
		FST = {
			RUS_calculate_prestige_value = yes
		}
	}

	if = {
		limit = {
			OR = {
				VYT = {
					exists = yes
				}
				KOM = {
					exists = yes
				}
				SVR = {
					exists = yes
				}
			}
		}
		#State popularity generator
		every_country = {
			limit = {
				is_russian_nation = yes
			}
			every_owned_state = {
				RUS_get_state_special_party_pop = yes
			}
		}
	}

	if = {
		limit = {
			VYT = {
				has_country_flag = RUS_regional_stage
			}
		}
		VYT = {
			RUS_state_pops_to_pop_wheel = yes
		}
	}

	for_each_scope_loop = {
		array = global.russian_warlords
		if = {
			limit = {
				is_neighbor_of = NOV
			}
			random_list = {
				10 = {
					add_to_variable = { NOV_Takeover_Progress = -8 }
				}
				10 = {
					add_to_variable = { NOV_Takeover_Progress = -5 }
				}
				10 = { }
			}
		}
	}

	for_each_scope_loop = {
		array = global.RUS_democratic_nations
		if = {
			limit = {
				has_country_flag = RUS_POLLS_ENABLE
			}
			country_event = { id = russian_democracy_helpers.4 days = 5 }
		}
	}

	URL = {
		clamp_variable = {
			var = Ural_initiates
			min = 0
			max = Ural_initiates_cap
		}
	}

	if = {
		limit = { country_exists = RWS }
		RWS = { RUS_nuclear_program_effects = yes }
	}
	if = {
		limit = { country_exists = SIB }
		SIB = { RUS_nuclear_program_effects = yes }
	}

	every_country = {
		if = {
			limit = {
				any_neighbor_country = {
					OR = {
						check_variable = { THIS.num_divisions > THIS.TNOLimiterIndustry }
						check_variable = { THIS.TNOLimiterIndustry > ROOT.TNOLimiterIndustry }
					}
				}
			}
			TNO_div_limiter_escalator_mechanism_run = yes
		}
		TNO_div_limiter_calculate_unit_cap = yes
	}

	if = {
		limit = {
			AND = {
				JAP = {
					is_ai = yes
				}
				GER = {
					is_ai = yes
				}
				USA = {
					is_ai = yes
				}
				BRG = {
					is_ai = yes
				}
			}
		}
		set_global_flag = DISABLE_AI_CRISES
	}

	if = {
		limit = {
			AND = {
				OR = {
					JAP = {
						is_ai = no
					}
					GER = {
						is_ai = no
					}
					USA = {
						is_ai = no
					}
					BRG = {
						is_ai = no
					}
				}
				has_global_flag = DISABLE_AI_CRISES
			}
		}
		clr_global_flag = DISABLE_AI_CRISES
	}

	if = {
		limit = {
			AND = {
				URL = {
					exists = no
				}
				ORE = {
					exists = no
				}
				MGN = {
					exists = no
				}
				DRL = {
					exists = no
				}
				WSR = {
					NOT = {
						has_war_with = WSB
					}
				}
				NOT = {
					has_global_flag = RUS_SOUTHERN_URALS_CRISIS_OVER
				}
			}
		}
		set_global_flag = RUS_SOUTHERN_URALS_CRISIS_OVER
		WSR = {
			RUS_urals_clear_rftu = yes
		}
		WSB = {
			RUS_urals_clear_rftu = yes
		}
	}
	if = {
		limit = {
			AND = {
				NOT = {
					country_exists = KZK
					country_exists = NPL
				}
				NOT = {
					has_global_flag = RUS_KAZAKH_CRISIS_OVER
				}
			}
		}
		set_global_flag = RUS_KAZAKH_CRISIS_OVER
		every_country = {
			limit = {
				NOT = {
					OR = {
						tag = URL
						tag = ORE
						tag = MGN
						tag = DRL
					}
				}
			}
			clr_global_flag = RWS_INTEGRATING_KAZ
			clr_global_flag = SIB_INTEGRATING_KAZ
			clr_global_flag = SIB_INTEGRATING_NPL
			clr_global_flag = RWS_INTEGRATING_NPL
			clr_country_flag = BEGUN_KAZAKH_CRISIS
			clr_country_flag = URALS_CRISIS_KAZ_INFLUENCE_0
			clr_country_flag = URALS_CRISIS_NPL_INFLUENCE_0
			clr_country_flag = URALS_CRISIS_KAZ_INFLUENCE_1
			clr_country_flag = URALS_CRISIS_NPL_INFLUENCE_1
			clr_country_flag = URALS_CRISIS_KAZ_INFLUENCE_2
			clr_country_flag = URALS_CRISIS_NPL_INFLUENCE_2
			clr_country_flag = URALS_CRISIS_KAZ_INFLUENCE_3
			clr_country_flag = URALS_CRISIS_NPL_INFLUENCE_3
			clr_country_flag = WSR_INFLUENCE_LEVEL_1
			clr_country_flag = WSR_INFLUENCE_LEVEL_2
			clr_country_flag = WSR_INFLUENCE_LEVEL_3
			clr_country_flag = WSR_INFLUENCE_LEVEL_4
			clr_country_flag = WSR_INFLUENCE_LEVEL_5
			clr_country_flag = WSB_INFLUENCE_LEVEL_1
			clr_country_flag = WSB_INFLUENCE_LEVEL_2
			clr_country_flag = WSB_INFLUENCE_LEVEL_3
			clr_country_flag = WSB_INFLUENCE_LEVEL_4
			clr_country_flag = WSB_INFLUENCE_LEVEL_5
		}
	}
	if = {
		limit = {
			SBA = {
				exists = yes
				NOT = {
					has_country_flag = SBA_NO_MORE_ANARCHISM
					has_country_flag = SBA_NO_MORE_STATISM
				}
			}
		}
		SBA = {
			SBA_set_black_army_control = yes
		}
	}

	if = {
		limit = {
			date > 1963.11.11
			NOT = {
				OR = {
					has_global_flag = RUS_shattered_kazakhstan
					has_global_flag = KAZ_UNIFIED
				}
			}
		}
		ZZZ = {
			country_event = {
				id = release_dummy.5
				days = 7
				random = 24
			}
		}
	}

	if = {
		limit = {
			TYM = {
				exists = yes
				OR = {
					has_country_flag = TYM_fyp_ongoing
					has_country_flag = TYM_another_fyp_ongoing
					has_country_flag = TYM_3rd_fyp_ongoing
				}
			}
		}			
		TYM = {
			subtract_from_variable = { TYMAgriculturalStrain = TYMAgriculturalStrainTicker }
			if = {
				limit = {
					check_variable = { TYMAgriculturalStrain < TYMAgriculturalStrainTicker}
				}
				set_variable = { TYMAgriculturalStrain = 0 }
			}
			TYM_Famine_Check = yes
		}
	}

	#if = {
	#	limit = {
	#		KOK = {
	#			exists = yes
	#		}
	#	}
	#	KOK = {
	#		#khanate_legitimacy_overflow_check = yes
	#		khanate_legitimacy_idea_assignment = yes
	#
	#		if = {
	#			limit = {
	#				NOT = { has_country_flag = KOK_FAIR_KHAN }
	#			}
	#			khanate_monthly_unrest_calc = yes
	#			khanate_vibe_check = yes
	#			khanate_slave_bonus_scaling = yes
	#			khanate_monthly_slave_gain = yes
	#		}
	#		if = {
	#			limit = {
	#				check_variable = { khanate_slave_unrest_monthly > 0.01 }
	#			}
	#			khanate_unrest_increase = yes
	#		}
	#	}
	#}

	if = {
		limit = {
			tag = IBR
			country_exists = IBR
		}
		hidden_effect = {
			IBR_stability_update = yes
		}
	}

	ZZZ = {
		econ_recompile_all_spheres = yes
		generate_econ_rankings = yes
		econ_get_world_gdp = yes
	}

	if = {
		limit = {
			KOM = {
				exists = yes
			}
		}
		KOM = {
			clamp_variable = {
				var = KOM.KOMCenterPower
				min = 0
				max = 100
			}
			clamp_variable = {
				var = KOM.KOMLeftPower
				min = 0
				max = 100
			}
			clamp_variable = {
				var = KOM.KOMRightPower
				min = 0
				max = 100
			}
			clamp_variable = {
				var = KOM.KOMStalinaInfluence
				min = 0
				max = 100
			}
			clamp_variable = {
				var = KOM.KOMBukharinaInfluence
				min = 0
				max = 100
			}
			clamp_variable = {
				var = KOM.KOMKosyginInfluence
				min = 0
				max = 100
			}
			clamp_variable = {
				var = KOM.KOMSuslovInfluence
				min = 0
				max = 100
			}
			clamp_variable = {
				var = KOM.KOMTaboritskyInfluence
				min = 0
				max = 100
			}
			clamp_variable = {
				var = KOM.KOMGumilyovInfluence
				min = 0
				max = 100
			}
			clamp_variable = {
				var = KOM.KOMZhdanovInfluence
				min = 0
				max = 100
			}
			clamp_variable = {
				var = KOM.KOMVoznesenskyInfluence
				min = 0
				max = 100
			}
		}
	}

	### COMECON
	SocIntern_Refresh_Arrays = yes
	every_country = {
		if = {
			limit = {
				AND = {
					has_country_flag = SOCINTERN_LEADER
					exists = no
				}
			}
			set_global_flag = RESET_COMINTERN_LEADER
		}
	}
	if = {
		limit = {
			has_global_flag = RESET_COMINTERN_LEADER
		}
		ZZZ = {
			SocIntern_Change_Leader = yes
		}
		clr_global_flag = RESET_COMINTERN_LEADER
	}

	every_country = {
		clr_country_flag = COMECON_dev_withdrawal_made
		clr_country_flag = COMECON_def_withdrawal_made
		clr_country_flag = COMECON_dev_deposit_made
		clr_country_flag = COMECON_def_deposit_made
		clr_country_flag = COMECON_aid_sent

		set_variable = { COMECON_lending_cap_one_shot = GDP }
		set_variable = { COMECON_lending_cap_yearly = GDP }
		divide_variable = { COMECON_lending_cap_one_shot = 20 }
		divide_variable = { COMECON_lending_cap_yearly = 100 }
	}

	if = {
		limit = {
			KOM = {
				exists = yes
				has_country_flag = KOM_ordosocialist_party_left_right
			}
		}
		clamp_variable = {
			var = KOMOrdosocialistLean
			min = -3
			max = 3
		}
	}
	if = {
		limit = {
			FIN = { exists = yes }
		}
		set_variable = { FINTotalRevenue = 0 }
		add_to_variable = { FINTotalRevenue = FINPaktRevenue }
		add_to_variable = { FINTotalRevenue = FINOFNRevenue }
	}
	ZZZ_econ_inflation_cycling_calculation = yes 

	clear_array = GLOBAL.econ_sphere_leaders # necessary for some calcs :) 
	
	every_country = {
		if = {
			limit = {
				econ_can_use_economy_system = yes
			}
			if = {
				limit = { NOT = { has_idea = economy_multiplicative_modifiers_base } }
				add_ideas = economy_multiplicative_modifiers_base
			}
			societal_development_monthly_check = yes # update policy effectiveness first! 
			econ_calculations_ON_MONTHLY = yes
			calculate_consumer_goods_need = yes #Do this after consumption so the base value won't suddenly change on the player
		}
	}

	every_country = {
		limit = {
			check_variable = { GDP = 0.0 } #already converted to billion
		}
		generate_country_gdp = yes
	}

	USA = {
		USA_monthly_pulse_effect = yes
	}

	BRG = {
		BRG_monthly_pulse_effect = yes
	}

	ANG = {
		ANG_monthly_pulse_effect = yes
	}

	COG = {
		COG_monthly_pulse_effect = yes
	}

	SAF = {
		add_to_variable = { SAF_diamond_count = SAF_diamond_gain }
		set_variable = {SAF_diamond_misc_income = SAF_diamond_count}
		multiply_variable = {SAF_diamond_misc_income = 0.001}
		log = "[GetDateText]: [THIS.GetName]: Added diamonds to SAF"
	}

	JAP = {
		JAP_monthly_pulse = yes
	}
	NOV = {
		NOV_monthly_pulse = yes
	}
	ENG = {
		if = {
			limit = {
				has_country_flag = ENG_MILMAN_INIT
			}
			ENG_MILMAN_DECAY_EXEC = yes
		}
		ParliamentMechanic_GovStab_Calculate = yes
	}

	if = {
		limit = {
			OR = {
				check_variable = { ZZZ.month_counter = 3 }
				check_variable = { ZZZ.month_counter = 6 }
				check_variable = { ZZZ.month_counter = 9 }
				check_variable = { ZZZ.month_counter = 12 }
			}
		}
		for_each_scope_loop = {
			array = global.chinese_warlords
			clamp_chi_influence = yes
			if = {
				limit = {
					NOT = {
						original_tag = TIB
					}
				}
				if = {
					limit = {
						check_variable = { chi_influence < 48 }
					}
					add_to_variable = { chi_influence = 1 }
				}
				else_if = {
					limit = {
						check_variable = { chi_influence > 52 }
					}
					add_to_variable = { chi_influence = -1 }
				}
			}
		}
	}

	#if = {
		#	limit = {
			#		NPL = {
				#			exists = yes
				#			NOT = {
					#				has_country_flag = NPL_revolt
					#			}
				#		}
			#	}
		#	NPL = {
			#		add_to_variable = { NPL_Polish_Approval = NPL_Polish_Approval_monthly }
			#		add_to_variable = { NPL_Native_Unrest = NPL_Native_Unrest_monthly }
			#		add_to_variable = { NPL_Food_Security = NPL_Food_Security_monthly }
			#		NPL_clamp_all_variables = yes
			#		NPL_check_all_variables = yes
			#	}
		#}

	if = {
		limit = { has_global_flag = Iberian_Wars }
		if = {
			limit = {
				GIB = {
					has_government = despotism
				}
			}
			GIB = {
				log = "[GetDateText]: [THIS.GetName]: ran finance script "
				#GIB_run_finance_script = yes
			}
			every_country = {
				limit = {
					has_country_flag = AUCTION_OPTED_IN
				}
				set_variable = { GDPDiv10 = GDP }
				divide_variable = { GDPDiv10 = 10 }
			}
		}
		every_country = {
			limit = {
				is_iberian_nation = yes
			}
			if = {
				limit = { has_defensive_war = yes }
				if = {
					limit = { has_idea = Iberian_Wars_Minor	}
					add_to_variable = { IberianWarExhaustion = 3 }
				}
				else_if = {
					limit = { has_idea = Iberian_Wars_Major	}
					add_to_variable = { IberianWarExhaustion = 1 }
				}
			}
			if = {
				limit = { has_defensive_war = yes }
				if = {
					limit = {
						casualties > 2000
						has_war = yes
					}
					add_to_variable = { IberianWarExhaustion = 1 }
				}
				else_if = {
					limit = {
						casualties > 5000
						has_war = yes
					}
					add_to_variable = { IberianWarExhaustion = 2 }
				}
				else_if = {
					limit = {
						casualties > 10000
						has_war = yes
					}
					add_to_variable = { IberianWarExhaustion = 3 }
				}
				else_if = {
					limit = {
						casualties > 25000
						has_war = yes
					}
					add_to_variable = { IberianWarExhaustion = 4 }
				}
			}
			if = {
				limit = { has_offensive_war = yes }
				if = {
					limit = { has_idea = Iberian_Wars_Minor }
					add_to_variable = { IberianWarExhaustion = 5 }
				}
				else_if = {
					limit = { has_idea = Iberian_Wars_Major }
					add_to_variable = { IberianWarExhaustion = 2 }
				}
			}
			if = {
				limit = { has_offensive_war = yes }
				if = {
					limit = {
						casualties > 2000
						has_war = yes
					}
					add_to_variable = { IberianWarExhaustion = 1.5 }
				}
				else_if = {
					limit = {
						casualties > 5000
						has_war = yes
					}
					add_to_variable = { IberianWarExhaustion = 2.5 }
				}
				else_if = {
					limit = {
						casualties > 10000
						has_war = yes
					}
					add_to_variable = { IberianWarExhaustion = 3.5 }
				}
				else_if = {
					limit = {
						casualties > 25000
						has_war = yes
					}
					add_to_variable = { IberianWarExhaustion = 4.5 }
				}
			}
			if = {
				limit = { has_country_flag = SPS_WE1 }

				add_to_variable = { IberianWarExhaustion = 1.5 }

			}
			if = {
				limit = { has_country_flag = SPS_WE2 }

				add_to_variable = { IberianWarExhaustion = 1.5 }

			}
			clamp_variable = {
				var = IberianWarExhaustion
				min = 0
				max = 100
			}
			log = "[GetDateText]: [THIS.GetName]: ran war exhaustion pulse - war exhaustion [?THIS.IberianWarExhaustion] "
			IBRCheckExhaustion = yes
		}
		GNS = {
			if = {
				limit = {
					has_war = no
					has_country_flag = GNS_war_Spain
					NOT = {
						has_country_flag = Iberian_Wars_Resigned
					}
				}
				every_country = {
					limit = {
						is_iberianwar_mainland_nation = yes
						NOT = {
							tag = GNS
							is_puppet_of = GNS
						}
					}
					GNS = {
						declare_war_on = {
							target = PREV
							type = annex_everything
						}
					}
				}
			}
		}
		FZL = {
			if = {
				limit = {
					has_war = no
					has_country_flag = FZL_war_portugal
					NOT = {
						has_country_flag = Iberian_Wars_Resigned
					}
				}
				every_country = {
					limit = {
						is_iberianwar_mainland_nation = yes
						NOT = {
							tag = FZL
							is_puppet_of = FZL
						}
					}
					FZL = {
						declare_war_on = {
							target = PREV
							type = annex_everything
						}
					}
				}
			}
		}
	}

	BRG = { #Burgundy famine mechanic
		BRG_famine_monthly_check = yes
	}
	# if = {
	# 	limit = {
	# 		OR = {
	# 			country_exists = FEN
	# 			country_exists = ENG
	# 		}
	# 	}
	# 	ParliamentMechanic_GovStab_Calculate = yes
	# }

	USA = { #Burgundy's Globalplan Puma Ingrained into their minds focus effect, shifts America to the right by very small increments over time
		if = {
			limit = {
				has_country_flag = BRG_ingrained_into_their_minds_flag
			}
			every_owned_state = {
				add_to_variable = {
					NPP_FR_popularity = 0.00125
				}
				add_to_variable = {
					NPP_R_popularity = 0.00125
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = BRG_corrupt_the_youth_flag
			}
			every_owned_state = {
				add_to_variable = {
					NPP_FR_popularity = 0.0006
				}
				add_to_variable = {
					NPP_R_popularity = 0.0006
				}
			}
		}
	}

	DRL = { #Dirlywanker's System To Replace Ideas
		add_to_variable = { DRL_Dirlewanger_Brigade_Angery_Level = 1 } #Balancing
		add_to_variable = { DRL_Dirlewanger_Officer_Angery_Level = 1 } #Balancing
		if = {
			limit = {
				has_idea = DRL_Soldiers_Extra_Discontent_Idea
				check_variable = { DRL_Dirlewanger_Brigade_Angery_Level < 41 }
			}
			swap_ideas = {
				remove_idea = DRL_Soldiers_Extra_Discontent_Idea
				add_idea = DRL_Soldiers_Discontent_Idea
			}
			#country_event = DRL.371
		}
		if = {
			limit = {
				has_idea = DRL_Soldiers_Discontent_Idea
				check_variable = { DRL_Dirlewanger_Brigade_Angery_Level > 40 }
			}
			swap_ideas = {
				remove_idea = DRL_Soldiers_Discontent_Idea
				add_idea = DRL_Soldiers_Extra_Discontent_Idea
			}
			#country_event = DRL.370
		}
		if = {
			limit = {
				has_idea = DRL_Soldiers_Discontent_Idea
				check_variable = { DRL_Dirlewanger_Brigade_Angery_Level < 31 }
			}
			swap_ideas = {
				remove_idea = DRL_Soldiers_Discontent_Idea
				add_idea = DRL_Soldiers_Okay_Idea
			}
			#country_event = DRL.371
		}
		if = {
			limit = {
				has_idea = DRL_Soldiers_Okay_Idea
				check_variable = { DRL_Dirlewanger_Brigade_Angery_Level > 30 }
			}
			swap_ideas = {
				remove_idea = DRL_Soldiers_Okay_Idea
				add_idea = DRL_Soldiers_Discontent_Idea
			}
			#country_event = DRL.370
		}
		if = {
			limit = {
				has_idea = DRL_Soldiers_Okay_Idea
				check_variable = { DRL_Dirlewanger_Brigade_Angery_Level < 21 }
			}
			swap_ideas = {
				remove_idea = DRL_Soldiers_Okay_Idea
				add_idea = DRL_Soldiers_A_Bit_Happy_Idea
			}
			#country_event = DRL.371
		}
		if = {
			limit = {
				has_idea = DRL_Soldiers_A_Bit_Happy_Idea
				check_variable = { DRL_Dirlewanger_Brigade_Angery_Level > 20 }
			}
			swap_ideas = {
				remove_idea = DRL_Soldiers_A_Bit_Happy_Idea
				add_idea = DRL_Soldiers_Okay_Idea
			}
			#country_event = DRL.370
		}
		if = {
			limit = {
				has_idea = DRL_Soldiers_A_Bit_Happy_Idea
				check_variable = { DRL_Dirlewanger_Brigade_Angery_Level < 11 }
			}
			swap_ideas = {
				remove_idea = DRL_Soldiers_A_Bit_Happy_Idea
				add_idea = DRL_Soldiers_Happy_Idea
			}
			#country_event = DRL.371
		}
		if = {
			limit = {
				has_idea = DRL_Soldiers_Happy_Idea
				check_variable = { DRL_Dirlewanger_Officer_Angery_Level > 10 }
			}
			swap_ideas = {
				remove_idea = DRL_Soldiers_Happy_Idea
				add_idea = DRL_Soldiers_A_Bit_Happy_Idea
			}
			#country_event = DRL.370
		}
		if = {
			limit = { #Officers
				has_idea = DRL_Officers_Disloyal_Idea
				check_variable = { DRL_Dirlewanger_Officer_Angery_Level < 41 }
			}
			swap_ideas = {
				remove_idea = DRL_Officers_Disloyal_Idea
				add_idea = DRL_Officers_Disrespectful_Idea
			}
			#country_event = DRL.373
		}
		if = {
			limit = {
				has_idea = DRL_Officers_Disrespectful_Idea
				check_variable = { DRL_Dirlewanger_Officer_Angery_Level > 40 }
			}
			swap_ideas = {
				remove_idea = DRL_Officers_Disrespectful_Idea
				add_idea = DRL_Officers_Disloyal_Idea
			}
			#country_event = DRL.372
		}
		if = {
			limit = {
				has_idea = DRL_Officers_Disrespectful_Idea
				check_variable = { DRL_Dirlewanger_Officer_Angery_Level < 31 }
			}
			swap_ideas = {
				remove_idea = DRL_Officers_Disrespectful_Idea
				add_idea = DRL_Officers_Normal_Idea
			}
			#country_event = DRL.373
		}
		if = {
			limit = {
				has_idea = DRL_Officers_Normal_Idea
				check_variable = { DRL_Dirlewanger_Officer_Angery_Level > 30 }
			}
			swap_ideas = {
				remove_idea = DRL_Officers_Normal_Idea
				add_idea = DRL_Officers_Disrespectful_Idea
			}
			#country_event = DRL.372
		}
		if = {
			limit = {
				has_idea = DRL_Officers_Normal_Idea
				check_variable = { DRL_Dirlewanger_Officer_Angery_Level < 21 }
			}
			swap_ideas = {
				remove_idea = DRL_Officers_Normal_Idea
				add_idea = DRL_Officers_Respect_Idea
			}
			#country_event = DRL.373
		}
		if = {
			limit = {
				has_idea = DRL_Officers_Respect_Idea
				check_variable = { DRL_Dirlewanger_Officer_Angery_Level > 20 }
			}
			swap_ideas = {
				remove_idea = DRL_Officers_Respect_Idea
				add_idea = DRL_Officers_Normal_Idea
			}
			#country_event = DRL.372
		}
		if = {
			limit = {
				has_idea = DRL_Officers_Respect_Idea
				check_variable = { DRL_Dirlewanger_Officer_Angery_Level < 11 }
			}
			swap_ideas = {
				remove_idea = DRL_Officers_Respect_Idea
				add_idea = DRL_Officers_Unswayingly_Loyal_Idea
			}
			#country_event = DRL.373
		}
		if = {
			limit = {
				has_idea = DRL_Officers_Unswayingly_Loyal_Idea
				check_variable = { DRL_Dirlewanger_Officer_Angery_Level > 10 }
			}
			swap_ideas = {
				remove_idea = DRL_Officers_Unswayingly_Loyal_Idea
				add_idea = DRL_Officers_Respect_Idea
			}
			#country_event = DRL.372
		}
	}

	####IME resistance system if this breaks please call targai an idiot but don't actually he's very sensitive###
	IME = {
		if = {
			limit = {
				check_variable = {
					var = IME_irgun_strength
					value = 0
					compare = greater_than
				}
				NOT = {
					has_country_flag = IME_irgun_wiped_out
				}
			}
			add_to_variable = {
				var = IME_irgun_strength
				value = 5
			}
			clamp_variable = {
				var = IME_irgun_strength
				max = 40
				min = 0
			}

		}

		if = {
			limit = {
				check_variable = {
					var = IME_anm_strength
					value = 0
					compare = greater_than
				}
				NOT = {
					has_country_flag = IME_anm_wiped_out
				}
			}
			add_to_variable = {
				var = IME_anm_strength
				value = 5
			}
			clamp_variable = {
				var = IME_anm_strength
				max = 40
				min = 0
			}

		}

		if = {
			limit = {
				check_variable = {
					var = IME_lehi_strength
					value = 0
					compare = greater_than
				}
				NOT = {
					has_country_flag = IME_lehi_wiped_out
				}
			}
			add_to_variable = {
				var = IME_lehi_strength
				value = 5
			}
			clamp_variable = {
				var = IME_lehi_strength
				max = 40
				min = 0
			}

		}

		if = {
			limit = {
				check_variable = {
					var = IME_plfgc_strength
					value = 0
					compare = greater_than
				}
				NOT = {
					has_country_flag = IME_plfgc_wiped_out
				}
			}
			add_to_variable = {
				var = IME_plfgc_strength
				value = 5
			}
			clamp_variable = {
				var = IME_plfgc_strength
				max = 40
				min = 0
			}

		}
	}

	#Lysenko sanity decrease
	MGN = {
		if = {
			limit = {
				NOT = {	has_global_flag = AFTER_MIDNIGHT_COMMENCED }
			}
			if = {
				limit = {
					check_variable = {
						var = lysenko_sanity
						value = 0
						compare = greater_than
					}
					NOT = {
						has_global_flag = MGN_NKVD_coup
					}
				}
				subtract_from_variable = {
					var = lysenko_sanity
					value = 2
				}
				clamp_variable = {
					var = lysenko_sanity
					max = 100
					min = 0
				}
			}
			if = {
				limit = {
					check_variable = {
						var = lysenko_sanity
						value = 0
						compare = equals
					}
				}
				country_event = {
					id = MGN.255
					days = 1
				}
			}
			if = {
				limit = {
					has_global_flag = MGN_NKVD_coup
				}
				remove_ideas = {
					MGN_SANITY_NEUTRAL
					MGN_SANITY_LOW
					MGN_SANITY_HIGH
				}
			}
			if = {
				limit = {
					NOT = {
						has_global_flag = MGN_NKVD_coup
					}
				}
				add_to_variable = { lysenko_nkvd_disloyalty = 0.5 }
				add_to_variable = { lysenko_nkvd_influence = 0.5 }
			}
			#NKVD Stufffffff
			if = {
				limit = {
					has_idea = MGN_Lysenko_Influence_Very_Low
				}
				remove_ideas = MGN_Lysenko_Influence_Very_Low
			}
			if = {
				limit = {
					has_idea = MGN_Lysenko_Influence_Low
				}
				remove_ideas = MGN_Lysenko_Influence_Low
			}
			if = {
				limit = {
					has_idea = MGN_Lysenko_Influence_Medium
				}
				remove_ideas = MGN_Lysenko_Influence_Medium
			}
			if = {
				limit = {
					has_idea = MGN_Lysenko_Influence_High
				}
				remove_ideas = MGN_Lysenko_Influence_High
			}
			if = {
				limit = {
					has_idea = MGN_Lysenko_Influence_Very_High
				}
				remove_ideas = MGN_Lysenko_Influence_Very_High
			}
			if = {
				limit = {
					check_variable = {
						lysenko_nkvd_influence < 20
					}
				}
				add_ideas = MGN_Lysenko_Influence_Very_Low
			}
			if = {
				limit = {
					check_variable = {
						lysenko_nkvd_influence > 20
					}
					check_variable = {
						lysenko_nkvd_influence < 41
					}
				}
				add_ideas = MGN_Lysenko_Influence_Low
			}
			if = {
				limit = {
					check_variable = {
						lysenko_nkvd_influence > 40
					}
					check_variable = {
						lysenko_nkvd_influence < 61
					}
				}
				add_ideas = MGN_Lysenko_Influence_Medium
			}
			if = {
				limit = {
					check_variable = {
						lysenko_nkvd_influence > 60
					}
					check_variable = {
						lysenko_nkvd_influence < 81
					}
				}
				add_ideas = MGN_Lysenko_Influence_High
			}
			if = {
				limit = {
					check_variable = {
						lysenko_nkvd_influence > 80
					}
				}
				add_ideas = MGN_Lysenko_Influence_Very_High
			}
		}
	}

	# ARC stuff
	set_temp_variable = { random_chance_var = random }
	if = {
		limit = {
			check_variable = { global.ARC_unity < -4 }
			NOT = {
				has_global_flag = ARC_post_war_conference
			}
		}
		every_country = {
			limit = { has_country_flag = joined_ARC }
			country_event = { id = ARC.34 }
		}
	}
	OST = {
		if = {
			limit = { has_idea = OST_harsh_economic_integration }
			add_to_variable = { national_debt = 0.075 } #already converted to billion
			GER = { add_to_variable = { money_reserves = 0.1 } } #already converted to billion
		}
	}
	# GERMANY MILITARY GUI INFLUENCERS
	GER = {
		GER_militarist_monthly_changes = yes
	}
	# Görings wonderful economic adventures & other monthly things
	GER = {
		if = {
			limit = {
				has_global_flag = german_civil_war_goeringvic
				has_country_flag = GGR_economy_tree
			}
			country_event = { id = goering.799 }
		}
		if = {
			limit = {
				check_variable = { GGR_leaving_militarists > 0 }
			}
			subtract_from_variable = { GGR_leaving_militarists = 1 }
		}
		if = {
			limit = {
				has_completed_focus = GER_GOR_the_power_of_the_atom
			}
			GGRCSI_calculate_total_nuclear_reactors = yes
		}
		if = {
			limit = {
				has_country_flag = GGR_kriegsmarine_development
			}
			set_variable = {
				var = GGR_ship_count
				value = num_ships
			}
			set_variable = {
				var = GGR_USA_ship_count
				value = USA.num_ships
			}
			set_variable = {
				var = GGR_JAP_ship_count
				value = JAP.num_ships
			}
		}
		if = {
			limit = {
				has_completed_focus = GGR_match_them
			}
			set_temp_variable = {
				var = GGR_USA_ship_temp
				value = USA.num_ships
			}
			multiply_temp_variable = {
				var = GGR_USA_ship_temp
				value = 0.75
			}
			set_temp_variable = {
				var = GGR_JAP_ship_temp
				value = JAP.num_ships
			}
			multiply_temp_variable = {
				var = GGR_JAP_ship_temp
				value = 0.75
			}
			set_variable = {
				var = GGR_USA_ship_target
				value = GGR_USA_ship_temp
			}
			set_variable = {
				var = GGR_JAP_ship_target
				value = GGR_JAP_ship_temp
			}
		}
		if = {
			limit = {
				has_completed_focus = GGR_the_ringhorn_doctrine
			}
			set_variable = {
				var = GGR_USA_ship_count_cruiser
				value = USA.num_ships_with_type@cruiser
			}
			set_variable = {
				var = GGR_JAP_ship_count_cruiser
				value = JAP.num_ships_with_type@cruiser
			}
			set_temp_variable = {
				var = GGR_USA_ship_cruiser_temp
				value = USA.num_ships_with_type@cruiser
			}
			multiply_temp_variable = {
				var = GGR_USA_ship_cruiser_temp
				value = 0.70
			}
			set_temp_variable = {
				var = GGR_JAP_ship_cruiser_temp
				value = JAP.num_ships_with_type@cruiser
			}
			multiply_temp_variable = {
				var = GGR_JAP_ship_cruiser_temp
				value = 0.70
			}
			set_variable = {
				var = GGR_USA_cruiser_target
				value = GGR_USA_ship_cruiser_temp
			}
			set_variable = {
				var = GGR_JAP_cruiser_target
				value = GGR_JAP_ship_cruiser_temp
			}
			set_variable = {
				var = GGR_ship_count_carrier
				value = num_ships_with_type@carrier
			}
			set_variable = {
				var = GGR_ship_count_battleship
				value = num_ships_with_type@battleship
			}
			if = {
				limit = {
					check_variable = {
						var = GGR_USA_cruiser_target
						value = GGR_JAP_cruiser_target
						compare = greater_than_or_equals
					}
				}
				set_variable = {
					var = GGR_cruiser_target
					value = GGR_JAP_cruiser_target
				}
			}
			if = {
				limit = {
					check_variable = {
						var = GGR_USA_cruiser_target
						value = GGR_JAP_cruiser_target
						compare = less_than
					}
				}
				set_variable = {
					var = GGR_cruiser_target
					value = GGR_USA_cruiser_target
				}
			}
		}

		#Based Speer stuff
		if = {
			limit = {
				tag = GER
				has_global_flag = german_civil_war_speervic
				NOT = {has_global_flag = SGR_natsoc_collapse}
			}
			Speerconomics_monthly_pulse = yes
			run_monthly_StateReich_pulse = yes
			reset_StateReich_buttons = yes
			RND_run_pulse = yes
			set_country_flag = SGR_speergraph_button_visible
			set_country_flag = SGR_RND_GUI_budget_button_enabled
			set_country_flag = SGR_RND_GUI_equipment_button_enabled
		}
	}
	
	# Speer stuff
	GER = {
		if = {
			limit = {
				has_global_flag = german_civil_war_speervic
			}
			if = {
				limit = {
					has_country_flag = sgr_werhmacht_division_limiter_activated
					NOT = {
						has_idea = GER_SGR_wehrmacht_division_limit_over
					}
					has_war = no
					check_variable = { num_divisions > sgr_wehrmacht_div_limit }
				}
				if = {
					limit = {
						is_ai = no
					}
					add_ideas = GER_SGR_wehrmacht_division_limit_over
					country_event = {
						id = speermilitary.26
					}
				}
				else = {
					set_country_flag = TNO_DIVISIONS_CAPPED
					while_loop_effect = {
						limit = {
							OR = {
								check_variable = { num_divisions > sgr_wehrmacht_div_limit }
								check_variable = { num_divisions = sgr_wehrmacht_div_limit }
							}
						}
						set_temp_variable = { max_disband_div = num_divisions }
						subtract_from_temp_variable = { max_disband_div = sgr_wehrmacht_div_limit }
						add_to_temp_variable = { max_disband_div = 3 }
						random_owned_state = {
							limit = {
								GER = {
									divisions_in_state = {
										size > 0
										state = PREV
									}
									meta_trigger = {
										text = {
											divisions_in_state = {
												size < [SGR_Maxdiv]
												state = PREV
											}
										}
										SGR_Maxdiv = "[?max_disband_div]"
									}
								}
							}
							GER = {
								delete_unit = {
									state = PREV
									disband = yes
								}
							}
						}
					}
				}
			}
			else_if = {
				limit = {
					has_idea = GER_SGR_wehrmacht_division_limit_over
					has_country_flag = sgr_werhmacht_division_limiter_activated
					has_war = no
					check_variable = {
						var = num_divisions
						value = sgr_wehrmacht_div_limit
						compare = less_than_or_equals
					}
				}
				remove_ideas = GER_SGR_wehrmacht_division_limit_over
				clr_country_flag = TNO_DIVISIONS_CAPPED
				country_event = {
					id = speermilitary.27
				}
			}
		}

		if = {
			limit = {
				MCW = { is_in_faction_with = GER }
				has_global_flag = german_civil_war_speervic
			}
			country_event = {
				id = speerflavor.97
				days = 3
			}
			country_event = {
				id = speerflavor.33
				days = 10
			}
		}
		
		# AI Destroying corps
		if = {
			limit = {
				has_global_flag = SGR_repatriation_started
				is_ai = yes
			}

			clearSGRStateInfoWindowFlags = yes

			for_each_loop = { #Action 3
				array = SGR_WWS_Megacorps_Power
				index = i
				
				if = {
					limit = {
						has_political_power > 0
						check_variable = {SGR_WWS_Megacorps_Power^i = 0 }
						NOT = { check_variable = {SGR_WWS_Megacorps^i = 0 } }
					}
					SGR_match_var_with_flag = yes
					abolish_local_megacorp = yes
					clearSGRStateInfoWindowFlags = yes
				}
			}

			if = {
				limit = {
					has_political_power > 0
					date > 1967.6.1
				}
				for_each_loop = { #Action 1
					array = SGR_WWS_Megacorps_Power
					index = i
					
					if = {
						limit = {
							has_political_power > 0
							check_variable = { SGR_WWS_Megacorps_Power^i > 0 }
							check_variable = { SGR_WWS_Regions^i < 500 }
						}
						SGR_match_var_with_flag = yes
						increase_middleclass_power = yes
						clearSGRStateInfoWindowFlags = yes
					}
				}
			}

			if = {
				limit = {
					command_power > 29.99
					date > 1968.6.1
				}
				for_each_loop = { #Action 2
					array = SGR_WWS_Megacorps_Power
					index = i
					
					if = {
						limit = {
							command_power > 29.99
							check_variable = { SGR_WWS_Megacorps_Power^i > 0 }
							check_variable = { SGR_WWS_Regions^i > 0 }
						}
						SGR_match_var_with_flag = yes
						decrease_megacorp_power = yes
						clearSGRStateInfoWindowFlags = yes
					}
				}
			}

			if = {
				limit = {
					check_variable = {IGFarbenPower = 0}
					NOT = {has_country_flag = IGFarben_dismantled}
					has_country_flag = Dismantle_IGFarben
				}
				country_event = {
					id = speer.413
					days = 2
				}
				set_country_flag = IGFarben_dismantled
			}

			if = {
				limit = {
					check_variable = {ReichswerkePower = 0}
					NOT = {has_country_flag = Reichswerke_dismantled}
					has_country_flag = Dismantle_Reichswerke
				}
				country_event = {
					id = speer.414
					days = 2
				}
				set_country_flag = Reichswerke_dismantled
			}

			if = {
				limit = {
					check_variable = {DaimlerPower = 0}
					NOT = {has_country_flag = Daimler_dismantled}
					has_country_flag = Dismantle_Daimler
				}
				country_event = {
					id = speer.415
					days = 2
				}
				set_country_flag = Daimler_dismantled
			}

			if = {
				limit = {
					check_variable = {SiemensPower = 0}
					NOT = {has_country_flag = Siemens_dismantled}
					has_country_flag = Dismantle_Siemens
				}
				country_event = {
					id = speer.416
					days = 2
				}
				set_country_flag = Siemens_dismantled
			}
		}
	}

	PRM = {
		if = {
			limit = {
				original_tag = PRM
				check_variable = {PRM_months_since_sacrifice < 8}
				NOT = {
					has_idea = RUS_terror_bombing
				}
			}
			add_to_variable = {PRM_months_since_sacrifice = 1}
		}
		if = {
			limit = {
				original_tag = PRM
				check_variable = {PRM_months_since_sacrifice > 7.9}
			}
			set_variable = {PRM_months_since_sacrifice = 0}

			if = {
				limit = {
					has_idea = PRM_aryan_control_1
				}
				country_event = {
					id = PRM.1312
					days = 2
					random = 200
				}
			}
			else = {
				country_event = {
					id = PRM.8
					days = 2
					random = 200
				}
			}
		}
	}

	ENG = {
		if = {
			limit = {
				has_global_flag = ENG_Faction_Start_Flag
			}
			add_to_variable = {
				ENG_EP_Influence = ENG_EP_Influence_Increase
			}
			add_to_variable = {
				ENG_OFN_Influence = ENG_OFN_Influence_Increase
			}
			clamp_variable = {
				var = ENG_EP_Influence
				min = 0
			}
			clamp_variable = {
				var = ENG_OFN_Influence
				min = 0
			}
		}
		if = {
			limit = {
				has_country_leader = {
					name = "Margaret Thatcher"
					ruling_only = yes
				}
			}
			ENG_Thatcher_Tick = yes
		}
		#MONTY COUP
		if = {
			limit = {
				AND = {
					is_ai = no
					OR = {
						has_country_leader = {
							name = "Margaret Thatcher"
							ruling_only = yes
						}
						has_country_leader = {
							name = "Harold Macmillan"
							ruling_only = yes
						}
					}
					check_variable = { ParliamentMechanic_GovStab < 0.1 }
				}
			}
			country_event = {
				id = ENG_Corn_crisis.21
				days = 5
			}
		}

		#BUTLER COUP
		if = {
			limit = {
				AND = {
					is_ai = no
					has_country_leader = {
						name = "Margaret Thatcher"
						ruling_only = yes
					}
					check_variable = { ENG_OG_Party_Lead > 0.9 }
				}
			}
			country_event = {
				id = ENG_Government_Changes.14
				days = 5
			}
		}

		#YDL COUP
		if = {
			limit = {
				AND = {
					is_ai = no
					OR = {
						has_country_flag = NDL_victorious
						has_country_flag = SLP_victorious
					}
					check_variable = { ParliamentMechanic_GovStab < 0.1 }
				}
			}
			country_event = {
				id = ENG_Government_Changes.9
				days = 5
			}
		}
	}
	update_state_population_custom_growth = yes 
}

BRG_famine_monthly_check = {
	add_to_variable = { BRG_famine_counter = BRG_famine_monthly_change }

	if = {
		limit = {
			check_variable = {
				BRG_famine_counter > 99
			}
			BRG = {
				has_country_flag = BRG_famine_flag
			}
		}
		BRG = {
			country_event = BRG.2050
		}
		add_to_variable = { BRG_famine_counter = -99 }
	}
	else_if = {
		limit = {
			check_variable = {
				BRG_famine_counter < 1
			}
			BRG = {
				has_country_flag = BRG_famine_flag
			}
		}
		BRG = {
			country_event = BRG.2051
		}
		add_to_variable = { BRG_famine_counter = 99 }
	}
}

#for when monthly_population is less than -1
properly_reduce_population = {
	every_controlled_state = {
		set_temp_variable = { manpower_to_remove_k = PREV.modifier@monthly_population }
		multiply_temp_variable = { manpower_to_remove_k = 100 } # lmao
		multiply_temp_variable = { manpower_to_remove_k = 0.015 } # actual pop growth rate expressed as % in 100
		multiply_temp_variable = { manpower_to_remove_k = state_population_k } # number to add in k x 100 
		multiply_temp_variable = { manpower_to_remove_k = 10 } 
		divide_temp_variable = { manpower_to_remove_k = 12 } # occurs monthly! 
		add_manpower = var:manpower_to_remove_k
		log = "Added [?manpower_to_remove_k] to [THIS.GETNAME] "
	}
}

societal_development_monthly_check = {
	TNO_process_policy_effectiveness_monthly_tick = yes

	add_to_variable = { admin_efficiency_counter = admin_efficiency_monthly_change }
	add_to_variable = { admin_efficiency_counter = modifier@admin_efficiency_monthly_rate }
	add_to_variable = { academic_base_counter = academic_base_monthly_change }
	add_to_variable = { academic_base_counter = modifier@academic_base_monthly_rate }
	add_to_variable = { agriculture_counter = agriculture_monthly_change }
	add_to_variable = { agriculture_counter = modifier@agriculture_monthly_rate }
	add_to_variable = { army_professionalism_counter = army_professionalism_monthly_change }
	add_to_variable = { army_professionalism_counter = modifier@army_professionalism_monthly_rate }
	add_to_variable = { research_facilities_counter = research_facilities_monthly_change }
	add_to_variable = { research_facilities_counter = modifier@research_facilities_monthly_rate }
	add_to_variable = { industrial_expertise_counter = industrial_expertise_monthly_change }
	add_to_variable = { industrial_expertise_counter = modifier@industrial_expertise_monthly_rate }
	add_to_variable = { industrial_equipment_counter = industrial_equipment_monthly_change }
	add_to_variable = { industrial_equipment_counter = modifier@industrial_equipment_monthly_rate }

	if = {
		limit = { check_variable = { admin_efficiency_counter > 239 } }
		country_event = societal_development.1102
		add_to_variable = { admin_efficiency_counter = -240 }
		multiply_variable = { admin_efficiency_monthly_change = 0.25 }
	}
	else_if = {
		limit = { check_variable = { admin_efficiency_counter < -239 } }
		country_event = societal_development.1103
		add_to_variable = { admin_efficiency_counter = 240 }
		multiply_variable = { admin_efficiency_monthly_change = 0.25 }
	}

	if = {
		limit = { check_variable = { academic_base_counter > 239 } }
		country_event = societal_development.1104
		add_to_variable = { academic_base_counter = -240 }
		multiply_variable = { academic_base_monthly_change = 0.25 }
	}
	else_if = {
		limit = { check_variable = { academic_base_counter < -239 } }
		country_event = societal_development.1105
		add_to_variable = { academic_base_counter = 240 }
		multiply_variable = { academic_base_monthly_change = 0.25 }
	}

	if = {
		limit = { check_variable = { research_facilities_counter > 239 } }
		country_event = societal_development.1106
		add_to_variable = { research_facilities_counter = -240 }
		multiply_variable = { research_facilities_monthly_change = 0.25 }
	}
	else_if = {
		limit = { check_variable = { research_facilities_counter < -239 } }
		country_event = societal_development.1107
		add_to_variable = { research_facilities_counter = 240 }
		multiply_variable = { research_facilities_monthly_change = 0.25 }
	}

	if = {
		limit = { check_variable = { industrial_expertise_counter > 239 } }
		country_event = societal_development.1110
		add_to_variable = { industrial_expertise_counter = -240 }
		multiply_variable = { industrial_expertise_monthly_change = 0.25 }
	}
	else_if = {
		limit = { check_variable = { industrial_expertise_counter < -239 } }
		country_event = societal_development.1111
		add_to_variable = { industrial_expertise_counter = 240 }
		multiply_variable = { industrial_expertise_monthly_change = 0.25 }
	}

	if = {
		limit = { check_variable = { industrial_equipment_counter > 239 } }
		country_event = societal_development.1112
		add_to_variable = { industrial_equipment_counter = -240 }
		multiply_variable = { industrial_equipment_monthly_change = 0.25 }
	}
	else_if = {
		limit = { check_variable = { industrial_equipment_counter < -239 } }
		country_event = societal_development.1113
		add_to_variable = { industrial_equipment_counter = 240 }
		multiply_variable = { industrial_equipment_monthly_change = 0.25 }
	}

	if = {
		limit = { check_variable = { agriculture_counter > 239 } }
		country_event = societal_development.1114
		add_to_variable = { agriculture_counter = -240 }
		multiply_variable = { agriculture_monthly_change = 0.25 }
	}
	else_if = {
		limit = { check_variable = { agriculture_counter < -239 } }
		country_event = societal_development.1115
		add_to_variable = { agriculture_counter = 240 }
		multiply_variable = { agriculture_monthly_change = 0.25 }
	}

	if = {
		limit = { check_variable = { army_professionalism_counter > 239 } }
		country_event = societal_development.1116
		add_to_variable = { army_professionalism_counter = -240 }
		multiply_variable = { army_professionalism_monthly_change = 0.25 }
	}
	else_if = {
		limit = { check_variable = { army_professionalism_counter < -239 } }
		country_event = societal_development.1117
		add_to_variable = { army_professionalism_counter = 240 }
		multiply_variable = { army_professionalism_monthly_change = 0.25 }
	}
}

first_every_year_script = {
	log = "[GetDateText]: [Root.GetName]: first_every_year_script"
	GER = {
		if = {
			limit = {
				has_global_flag = german_civil_war_speervic
				NOT = {has_global_flag = SGR_natsoc_collapse}
			}
			check_speer_alignment_value = yes
		}
	}
	TNO_tension_decay = yes
}
calculate_building_variables = {
	clear_variable = total_synthetic_refinery
	clear_variable = total_schools
	clear_variable = total_offices
	clear_variable = total_hospitals
	clear_variable = total_barracks
	clear_variable = total_prisons
	clear_variable = total_thermo_plants
	clear_variable = total_nuclear_reactors
	
	clear_variable = state_without_racks
	clear_variable = state_without_prisons
	set_variable = {school_in_best_empty_state = 0}
	set_variable = {office_in_best_empty_state = 0}
	set_variable = {hospital_in_best_empty_state = 0}
	
	set_variable = { schools_country_effect = 0 }
	set_variable = { offices_country_effect = 0 }
	set_variable = { hospitals_country_effect = 0 }
	set_variable = { barracks_country_effect = 0 }
	set_variable = { prisons_country_effect = 0 }
	set_variable = {altered_num_owned_states = num_owned_states}
	set_variable = {total_slot_calculation = 0}

	every_owned_state = {
		if = { 
			limit = { NOT = { check_variable = { TNO_lights = 2 } } }
			add_to_variable = { PREV.total_synthetic_refinery = non_damaged_building_level@synthetic_refinery }
			add_to_variable = { PREV.total_schools = non_damaged_building_level@schools }
			add_to_variable = { PREV.total_offices = non_damaged_building_level@offices }
			add_to_variable = { PREV.total_hospitals = non_damaged_building_level@hospitals }
			add_to_variable = { PREV.total_barracks = non_damaged_building_level@barracks }
			add_to_variable = { PREV.total_prisons = non_damaged_building_level@prisons }
		}
		add_to_variable = { PREV.total_thermo_plants = non_damaged_building_level@thermoelectric_plant }
		add_to_variable = { PREV.total_nuclear_reactors = non_damaged_building_level@nuclear_reactor }
	}

	if = {
		limit = { has_country_flag = TNO_eliminate_building_demand }
		set_variable = { schools_research_modifier = 0 }
		set_variable = { offices_PP_modifier = 0 }
		set_variable = { hospitals_pop_growth_modifier = 0 }
		set_variable = { barracks_manpower_modifier = 0 }
		set_variable = { barracks_org_modifier = 0 }
		set_variable = { prisons_stab_modifier = 0 }
	}
	else = {
		
		set_variable = { school_covered_province = 0 }
		set_variable = { office_covered_province = 0 }
		set_variable = { hospital_covered_province = 0 }
		set_variable = { barrack_covered_province = 0 }
		set_variable = { prison_covered_province = 0 }
		set_variable = { slot_multiplier = modifier@global_building_slots_factor }
		add_to_variable = { slot_multiplier = 1 }
		set_variable = { slot_addition = modifier@global_building_slots }
		

		
		every_owned_state = {
			set_temp_variable = {local_slot_multiplier = modifier@local_building_slots_factor}
			add_to_temp_variable = {local_slot_multiplier = 1}
			set_temp_variable = {local_slots = modifier@local_building_slots}
			add_to_temp_variable = { local_slots = PREV.slot_addition }
			multiply_temp_variable = {local_slots = local_slot_multiplier}
			multiply_temp_variable = {local_slots = PREV.slot_multiplier}
			if = {limit = {check_variable = {local_slots < 1}}
				add_to_variable = {PREV.altered_num_owned_states = -1}
				#If a state has no building slot, it's deduced from your total number of states
			}
			#Calculation so that number of building required < number of building you can possibly build
			if = {limit = {check_variable = {local_slots >1}}
				round_temp_variable = local_slots
			}
			clamp_temp_variable = {
				var = local_slots
				max = 5
				min = 0
			}
			add_to_variable = {PREV.total_slot_calculation = local_slots}
			
			if = {
				limit = { check_variable = { non_damaged_building_level@schools > 0.99 } }
				increase_schools_bonus_calc = yes
				add_to_variable = {PREV.school_covered_province = 1}
			}
			else_if = {
				limit = { PREV = {is_ai = no}
					check_variable = {local_slots>0.99}
				}
				calculate_school_bonus_state = yes
				
				set_temp_variable = { school_in_state_effect = percent_pop}
				add_to_temp_variable = {school_in_state_effect = 1}
				divide_temp_variable = {school_in_state_effect = 2}
				divide_temp_variable = {school_in_state_effect = PREV.num_owned_states}
				if = {
					limit = {check_variable = {school_in_state_effect >PREV.school_in_best_empty_state}}
					set_variable = { PREV.school_in_best_empty_state = school_in_state_effect}
					set_variable = {PREV.best_empty_state_school = THIS}
				}
			}
			if = {
				limit = { check_variable = { non_damaged_building_level@offices > 0.99 } }
				increase_offices_bonus_calc = yes
				add_to_variable = {PREV.office_covered_province = 1}
			}
			else_if = {
				limit = { PREV = {is_ai = no}
					check_variable = {local_slots>0.99}
				}
				set_temp_variable = { office_in_state_effect = percent_GDP}
				add_to_temp_variable = {office_in_state_effect = 1}
				divide_temp_variable = {office_in_state_effect = 2}
				divide_temp_variable = {office_in_state_effect = PREV.num_owned_states}
				if = {
					limit = {check_variable = {office_in_state_effect >PREV.office_in_best_empty_state}}
					set_variable = { PREV.office_in_best_empty_state = office_in_state_effect}
					set_variable = {PREV.best_empty_state_office = THIS}
				}
			}
			if = {
				limit = { check_variable = { non_damaged_building_level@hospitals > 0.99 } }
				increase_hospitals_bonus_calc = yes
				add_to_variable = {PREV.hospital_covered_province = 1}
			}	
			else_if = {
				limit = { PREV = {is_ai = no}
					check_variable = {local_slots>0.99}
				}
				set_temp_variable = { hospital_in_state_effect = percent_GDP}
				add_to_temp_variable = {hospital_in_state_effect = percent_pop}
				add_to_temp_variable = {hospital_in_state_effect = 1}
				divide_temp_variable = {hospital_in_state_effect = 3}
				divide_temp_variable = {hospital_in_state_effect = PREV.num_owned_states}
				if = {
					limit = {check_variable = {hospital_in_state_effect >PREV.hospital_in_best_empty_state}
					check_variable = {}}
					set_variable = { PREV.hospital_in_best_empty_state = hospital_in_state_effect}
					set_variable = {PREV.best_empty_state_hospital = THIS}
				}
			}
			if = {
				limit = { check_variable = { non_damaged_building_level@barracks > 0.99 } }
				increase_barracks_bonus_calc = yes
				else_if = {
					limit = {check_variable = {local_slots>0.99}}
					set_variable = {PREV.state_without_racks = THIS}
				}
				add_to_variable = {PREV.barrack_covered_province = 1}
			}
			if = {
				limit = { check_variable = { non_damaged_building_level@prisons > 0.99 } }
				increase_prisons_bonus_calc = yes
				add_to_variable = {PREV.prison_covered_province = 1}
				else_if = {
					limit = {check_variable = {local_slots>0.99}}
					 set_variable = {PREV.state_without_prisons = THIS}
				}
			}
		}
		set_temp_variable = { school_factor = 2 }
		clamp_variable = {
			var = altered_num_owned_states
			min = 1
		}
		multiply_temp_variable = { school_factor = altered_num_owned_states }
		divide_variable = { schools_country_effect = school_factor }
		set_variable = {best_state_for_schools = best_empty_state_school}
		set_variable = {school_in_best_state_bonus = school_in_best_empty_state}
		
		set_temp_variable = { offices_factor = 2 }
		multiply_temp_variable = { offices_factor = altered_num_owned_states }
		divide_variable = { offices_country_effect = offices_factor }
		set_variable = {best_state_for_office = best_empty_state_office}
		set_variable = {office_in_best_state_bonus = office_in_best_empty_state}
		
		set_temp_variable = { hospital_factor = 3 }
		multiply_temp_variable = { hospital_factor = altered_num_owned_states }
		divide_variable = { hospitals_country_effect = hospital_factor }	
		set_variable = {best_state_for_hospital = best_empty_state_hospital}
		set_variable = {hospital_in_best_state_bonus = hospital_in_best_empty_state}		

		divide_variable = { barracks_country_effect = altered_num_owned_states }
		
		divide_variable = { prisons_country_effect = altered_num_owned_states }
		update_buildings_modifier = yes
	}


	set_variable = { buildings_power_demand = num_of_enrichment_plants }
	multiply_variable = { buildings_power_demand = 4 }
	set_variable = { num_of_silos_power_demand = num_of_silos }
	multiply_variable = { num_of_silos_power_demand = 2 }

	add_to_variable = { buildings_power_demand = num_of_silos_power_demand }
	add_to_variable = { buildings_power_demand = used_naval_facs }
	add_to_variable = { buildings_power_demand = total_synthetic_refinery }
	add_to_variable = { buildings_power_demand = total_schools }
	add_to_variable = { buildings_power_demand = total_offices }
	add_to_variable = { buildings_power_demand = total_hospitals }
	add_to_variable = { buildings_power_demand = total_barracks }
	add_to_variable = { buildings_power_demand = total_prisons }

	divide_variable = { buildings_power_demand = 2 }

	set_variable = { buildings_oil_demand = total_thermo_plants }

	set_variable = { buildings_uranium_demand = num_of_enrichment_plants }
	multiply_variable = { buildings_uranium_demand = 6 }
	set_variable = { num_of_nuclear_reactors_uranium_demand = total_nuclear_reactors }
	multiply_variable = { num_of_nuclear_reactors_uranium_demand = 4 }
	add_to_variable = { buildings_uranium_demand = num_of_nuclear_reactors_uranium_demand }

	calculate_needed_schools = yes
	calculate_needed_hospitals = yes
	calculate_needed_prisons = yes
	calculate_needed_barracks = yes
	calculate_needed_offices = yes
	calculate_building_satisfaction = yes
}

calculate_needed_schools = {
	THIS = {
		set_temp_variable = { TNO_total_states = num_owned_states }
		set_temp_variable = {TNO_total_population = max_manpower_k}

		if = {
			limit = { has_idea = tno_education_elite_only }
			divide_temp_variable = { TNO_total_states = 10 }
		}
		else_if = {
			limit = { has_idea = tno_education_public_education }
			divide_temp_variable = { TNO_total_states = 8 }
		}
		else_if = {
			limit = { has_idea = tno_education_subsidised_higher_education }
			divide_temp_variable = { TNO_total_states = 6 }
		}
		else_if = {
			limit = { has_idea = tno_education_public_higher_education }
			divide_temp_variable = { TNO_total_states = 4 }
		}
		else_if = {
			limit = { has_idea = tno_education_free_education }
			divide_temp_variable = { TNO_total_states = 2 }
		}
		set_temp_variable = { TNO_building_calculation = TNO_total_states }
		divide_temp_variable = { TNO_total_population = 100000 }
		multiply_temp_variable = { TNO_building_calculation = TNO_total_population }
		multiply_temp_variable = { TNO_building_calculation = 4.5 }
		
		#if = { #Did this so that only countries with a per capita GDP of more than 1000 would have its demand multiplied. Just so that poorer countries don't get knocked down too much.
		#	limit = { check_variable = { gdpc > 1.000 } }
		#	multiply_temp_variable = { TNO_building_calculation = gdpc }
		#}
		
		if = { #If the value is still too small then adds one to the demand per state; this is for countries like Mexico.
			limit = { check_variable = { TNO_building_calculation < 7 } }
			add_to_temp_variable = { TNO_building_calculation = num_owned_states }
		}

		set_variable = { TNO_schools_total_needed = TNO_building_calculation }
		round_variable = TNO_schools_total_needed
		
		if = { #If a country is too small, either because of being physically small or population wise (Russia), this is to ensure a baseline demand is there.
			limit = { check_variable = { TNO_schools_total_needed < 7 } }
			set_variable = { TNO_schools_total_needed = 7 }
		}

		if = { #A country with this country flag will have zero building demand entirely. Should only be for the smallest countries and ones with no content.
			limit = { has_country_flag = TNO_eliminate_building_demand } 
			set_variable = { TNO_schools_total_needed = 0 }
		}
		clamp_variable = {
			var = TNO_schools_total_needed
			max = total_slot_calculation
			min  = 0
		}
	}
}
calculate_needed_hospitals = {
	THIS = {
		set_temp_variable = { TNO_total_states = num_owned_states }
		set_temp_variable = {TNO_total_population = max_manpower_k}

		if = { # TODO: OPTIMIZATION
			limit = { has_idea = tno_health_care_not_applicable }
			divide_temp_variable = { TNO_total_states = 10 }
		}
		else_if = {
			limit = { has_idea = tno_health_care_service_for_care }
			divide_temp_variable = { TNO_total_states = 8 }
		}
		else_if = {
			limit = { has_idea = tno_health_care_support_for_emergencies }
			divide_temp_variable = { TNO_total_states = 6 }
		}
		else_if = {
			limit = { has_idea = tno_health_care_low_income_protections }
			divide_temp_variable = { TNO_total_states = 4 }
		}
		else_if = {
			limit = { has_idea = tno_health_care_universal_health_care }
			divide_temp_variable = { TNO_total_states = 2 }
		}
		else_if = {
			limit = { has_idea = tno_health_care_free_universal_care }
			divide_temp_variable = { TNO_total_states = 1 }
		}
		set_temp_variable = { TNO_building_calculation = TNO_total_states }
		divide_temp_variable = { TNO_total_population = 100000 }
		multiply_temp_variable = { TNO_building_calculation = TNO_total_population }
		multiply_temp_variable = { TNO_building_calculation = 2.5 }

		#if = { #Did this so that only countries with a per capita GDP of more than 1000 would have its demand multiplied. Just so that poorer countries don't get knocked down too much.
		#	limit = { check_variable = { gdpc > 1.000 } }
		#	multiply_temp_variable = { TNO_building_calculation = gdpc }
		#}

		if = { #If the value is still too small then adds one to the demand per state; this is for countries like Mexico.
			limit = { check_variable = { TNO_building_calculation < 7 } }
			add_to_temp_variable = { TNO_building_calculation = num_owned_states }
		}

		set_variable = { TNO_hospitals_total_needed = TNO_building_calculation }
		round_variable = TNO_hospitals_total_needed
		
		if = {#If a country is too small, either because of being physically small or population wise (Russia), this is to ensure a baseline demand is there.
			limit = { check_variable = { TNO_hospitals_total_needed < 7 } }
			set_variable = { TNO_hospitals_total_needed = 7 }
		}
		if = { #A country with this country flag will have zero building demand entirely. Should only be for the smallest countries and ones with no content.
			limit = { has_country_flag = TNO_eliminate_building_demand } 
			set_variable = { TNO_hospitals_total_needed = 0 }
		}
		clamp_variable = {
			var = TNO_hospitals_total_needed
			max = total_slot_calculation
			min  = 0
		}
	}
}
calculate_needed_prisons = {
	THIS = {
		set_temp_variable = { TNO_total_states = num_owned_states }
		set_temp_variable = {TNO_total_population = max_manpower_k}

		if = {
			limit = { has_idea = tno_security_anarchic }
			divide_temp_variable = { TNO_total_states = 12 }
		}
		else_if = {
			limit = { has_idea = tno_security_police }
			divide_temp_variable = { TNO_total_states = 10 }
		}
		else_if = {
			limit = { has_idea = tno_security_security_service }
			divide_temp_variable = { TNO_total_states = 8 }
		}
		else_if = {
			limit = { has_idea = tno_security_data_cohesion }
			divide_temp_variable = { TNO_total_states = 6 }
		}
		else_if = {
			limit = { has_idea = tno_security_wire_tapping }
			divide_temp_variable = { TNO_total_states = 4 }
		}
		else_if = {
			limit = { has_idea = tno_security_preemptive_security }
			divide_temp_variable = { TNO_total_states = 2 }
		}
		set_temp_variable = { TNO_building_calculation = TNO_total_states }
		divide_temp_variable = { TNO_total_population = 100000 }
		multiply_temp_variable = { TNO_building_calculation = TNO_total_population }
		multiply_temp_variable = { TNO_building_calculation = 4.5 }

		if = { #If the value is still too small then adds one to the demand per state; this is for countries like Mexico.
			limit = { check_variable = { TNO_building_calculation < 5 } }
			add_to_temp_variable = { TNO_building_calculation = num_owned_states }
		}

		set_variable = { TNO_prisons_total_needed = TNO_building_calculation }
		round_variable = TNO_prisons_total_needed

		if = {#If a country is too small, either because of being physically small or population wise (Russia), this is to ensure a baseline demand is there.
			limit = { check_variable = { TNO_prisons_total_needed < 5 } }
			set_variable = { TNO_prisons_total_needed = 5 }
		}
		if = { #A country with this country flag will have zero building demand entirely. Should only be for the smallest countries and ones with no content.
			limit = { has_country_flag = TNO_eliminate_building_demand } 
			set_variable = { TNO_prisons_total_needed = 0 }
		}
		
		clamp_variable = {
			var = TNO_prisons_total_needed
			max = total_slot_calculation
			min  = 0
		}
		
	}
}
calculate_needed_barracks = {
	THIS = {
		set_temp_variable = { TNO_total_states = num_owned_states }
		set_temp_variable = {TNO_total_population = max_manpower_k}

		if = {
			limit = { has_idea = tno_conscription_disarmed_nation }
			divide_temp_variable = { TNO_total_states = 14 }
		}
		else_if = {
			limit = { has_idea = tno_conscription_volunteer_only }
			divide_temp_variable = { TNO_total_states = 12 }
		}
		else_if = {
			limit = { has_idea = tno_conscription_one_year_draft }
			divide_temp_variable = { TNO_total_states = 10 }
		}
		else_if = {
			limit = { has_idea = tno_conscription_two_year_draft }
			divide_temp_variable = { TNO_total_states = 8 }
		}
		else_if = {
			limit = { has_idea = tno_conscription_four_year_draft }
			divide_temp_variable = { TNO_total_states = 6 }
		}
		else_if = {
			limit = { has_idea = tno_conscription_service_by_requirement }
			divide_temp_variable = { TNO_total_states = 4 }
		}
		else_if = {
			limit = { has_idea = tno_conscription_all_adults_serve }
			divide_temp_variable = { TNO_total_states = 2 }
		}
		else_if = {
			limit = { has_idea = tno_conscription_scraping_the_barrel }
			divide_temp_variable = { TNO_total_states = 1 }
		}
		set_temp_variable = { TNO_building_calculation = TNO_total_states }
		divide_temp_variable = { TNO_total_population = 75000 }
		multiply_temp_variable = { TNO_building_calculation = TNO_total_population }
		multiply_temp_variable = { TNO_building_calculation = 5.5 }

		if = { #If the value is still too small then adds one to the demand per state; this is for countries like Mexico.
			limit = { check_variable = { TNO_building_calculation < 8 } }
			add_to_temp_variable = { TNO_building_calculation = num_owned_states }
		}

		set_variable = { TNO_barracks_total_needed = TNO_building_calculation }
		round_variable = TNO_barracks_total_needed
		
		if = {#If a country is too small, either because of being physically small or population wise (Russia), this is to ensure a baseline demand is there.
			limit = { check_variable = { TNO_barracks_total_needed < 8 } }
			set_variable = { TNO_barracks_total_needed = 8 }
		}
		if = { #A country with this country flag will have zero building demand entirely. Should only be for the smallest countries and ones with no content.
			limit = { has_country_flag = TNO_eliminate_building_demand } 
			set_variable = { TNO_barracks_total_needed = 0 }
		}
		clamp_variable = {
			var = TNO_barracks_total_needed
			max = total_slot_calculation
			min  = 0
		}
	}
}
calculate_needed_offices = {
	THIS = {
		set_temp_variable = { TNO_total_states = num_owned_states }
		set_temp_variable = {TNO_total_population = max_manpower_k}

		if = {
			limit = { has_idea = tno_admin_efficiency_organized_chaos }
			divide_temp_variable = { TNO_total_states = 14 }
		}
		else_if = {
			limit = { has_idea = tno_admin_efficiency_nonexistent_state_apparatus }
			divide_temp_variable = { TNO_total_states = 12 }
		}
		else_if = {
			limit = { has_idea = tno_admin_efficiency_illegitimate_administration }
			divide_temp_variable = { TNO_total_states = 10 }
		}
		else_if = {
			limit = { has_idea = tno_admin_efficiency_widespread_corruption }
			divide_temp_variable= { TNO_total_states = 8 }
		}
		else_if = {
			limit = { has_idea = tno_admin_efficiency_functional_administrative_systems }
			divide_temp_variable = { TNO_total_states = 6 }
		}
		else_if = {
			limit = { has_idea = tno_admin_efficiency_streamlined_bureaucracy }
			divide_temp_variable = { TNO_total_states = 4 }
		}
		else_if = {
			limit = { has_idea = tno_admin_efficiency_well_oiled_machine }
			divide_temp_variable = { TNO_total_states = 2 }
		}
		set_temp_variable = { TNO_building_calculation = TNO_total_states }
		divide_temp_variable = { TNO_total_population = 100000 }
		multiply_temp_variable = { TNO_building_calculation = TNO_total_population }
		multiply_temp_variable = { TNO_building_calculation = 4.5 }

		if = { #If the value is still too small then adds one to the demand per state; this is for countries like Mexico.
			limit = { check_variable = { TNO_building_calculation < 7 } }
			add_to_temp_variable = { TNO_building_calculation = num_owned_states }
		}

		set_variable = { TNO_offices_total_needed = TNO_building_calculation }
		round_variable = TNO_offices_total_needed

		#If a country is too small, either because of being physically small or population wise (Russia), this is to ensure a baseline demand is there.
		if = {
			limit = { check_variable = { TNO_offices_total_needed < 7 } }
			set_variable = { TNO_offices_total_needed = 7 }
		}
		if = { #A country with this country flag will have zero building demand entirely. Should only be for the smallest countries and ones with no content.
			limit = { has_country_flag = TNO_eliminate_building_demand } 
			set_variable = { TNO_offices_total_needed = 0 }
		}
		clamp_variable = {
			var = TNO_offices_total_needed
			max = total_slot_calculation
			min  = 0
		}
	}
}

calculate_building_satisfaction = {

	THIS = { 
		clear_variable = TNO_schools_satisfaction
		clear_variable = TNO_offices_satisfaction
		clear_variable = TNO_hospitals_satisfaction
		clear_variable = TNO_barracks_satisfaction
		clear_variable = TNO_prisons_satisfaction
		set_temp_variable = { TNO_schools_calculation = total_schools }
		set_temp_variable = { TNO_hospitals_calculation = total_hospitals }
		set_temp_variable = { TNO_prisons_calculation = total_prisons }
		set_temp_variable = { TNO_barracks_calculation = total_barracks }
		set_temp_variable = { TNO_offices_calculation = total_offices }
		#Policy effectiveness boost time
		set_temp_variable = {schools_PE = 1}
		add_to_temp_variable = {schools_PE = modifier@schools_PE_modifier}
		multiply_temp_variable = {TNO_schools_calculation = schools_PE}
				
		divide_temp_variable = { TNO_schools_calculation = TNO_schools_total_needed } #Calculate ratio of built buildings/demanded buildings

		set_temp_variable = { input = TNO_schools_calculation } #Calculate Satisfaction for this building type
		calculate_satisfaction_formula = yes
		set_variable = { TNO_schools_satisfaction = output  }

		set_variable = {TNO_next_schools_satisfaction = schools_PE}  #Calculate Satisfaction as if next building has already been built, then subtract current satisfaction value
		divide_variable = {TNO_next_schools_satisfaction = TNO_schools_total_needed}
		add_to_variable = {TNO_next_schools_satisfaction = TNO_schools_calculation}
		set_temp_variable = {input = TNO_next_schools_satisfaction}		
		calculate_satisfaction_formula = yes
		set_variable = {TNO_next_schools_satisfaction = output}
		subtract_from_variable = {TNO_next_schools_satisfaction = TNO_schools_satisfaction}

		multiply_variable = { TNO_schools_satisfaction = 100  } #Output satisfaction ratio


		set_temp_variable = {hospitals_PE = 1}
		add_to_temp_variable = {hospitals_PE = modifier@hospitals_PE_modifier}
		multiply_temp_variable = {TNO_hospitals_calculation = hospitals_PE}

		divide_temp_variable = { TNO_hospitals_calculation = TNO_hospitals_total_needed } 

		set_temp_variable = { input = TNO_hospitals_calculation } #Calculate Satisfaction for this building type
		calculate_satisfaction_formula = yes
		set_variable = { TNO_hospitals_satisfaction = output  }

		set_variable = {TNO_next_hospitals_satisfaction = hospitals_PE}  #Calculate Satisfaction as if next building has already been built, then subtract current satisfaction value
		divide_variable = {TNO_next_hospitals_satisfaction = TNO_hospitals_total_needed}
		add_to_variable = {TNO_next_hospitals_satisfaction = TNO_hospitals_calculation}
		set_temp_variable = {input = TNO_next_hospitals_satisfaction}		
		calculate_satisfaction_formula = yes
		set_variable = {TNO_next_hospitals_satisfaction = output}
		subtract_from_variable = {TNO_next_hospitals_satisfaction = TNO_hospitals_satisfaction}

		multiply_variable = { TNO_hospitals_satisfaction = 100  }

		set_temp_variable = {prisons_PE = 1}
		add_to_temp_variable = {prisons_PE = modifier@prisons_PE_modifier}
		multiply_temp_variable = {TNO_prisons_calculation = prisons_PE}

		divide_temp_variable = { TNO_prisons_calculation = TNO_prisons_total_needed } 

		set_temp_variable = { input = TNO_prisons_calculation } #Calculate Satisfaction for this building type
		calculate_satisfaction_formula = yes
		set_variable = { TNO_prisons_satisfaction = output  }

		set_variable = {TNO_next_prisons_satisfaction = prisons_PE}  #Calculate Satisfaction as if next building has already been built, then subtract current satisfaction value
		divide_variable = {TNO_next_prisons_satisfaction = TNO_prisons_total_needed}
		add_to_variable = {TNO_next_prisons_satisfaction = TNO_prisons_calculation}
		set_temp_variable = {input = TNO_next_prisons_satisfaction}		
		calculate_satisfaction_formula = yes
		set_variable = {TNO_next_prisons_satisfaction = output}
		subtract_from_variable = {TNO_next_prisons_satisfaction = TNO_prisons_satisfaction}

		multiply_variable = { TNO_prisons_satisfaction = 100  }

	
		set_temp_variable = { barracks_PE = 1 }
		add_to_temp_variable = { barracks_PE = modifier@barracks_PE_modifier }
		multiply_temp_variable = { TNO_barracks_calculation = barracks_PE }	
		divide_temp_variable = { TNO_barracks_calculation = TNO_barracks_total_needed } 

		set_temp_variable = { input = TNO_barracks_calculation } #Calculate Satisfaction for this building type
		calculate_satisfaction_formula = yes
		set_variable = { TNO_barracks_satisfaction = output  }

		set_variable = {TNO_next_barracks_satisfaction = barracks_PE}  #Calculate Satisfaction as if next building has already been built, then subtract current satisfaction value
		divide_variable = {TNO_next_barracks_satisfaction = TNO_barracks_total_needed}
		add_to_variable = {TNO_next_barracks_satisfaction = TNO_barracks_calculation}
		set_temp_variable = {input = TNO_next_barracks_satisfaction}		
		calculate_satisfaction_formula = yes
		set_variable = {TNO_next_barracks_satisfaction = output}
		subtract_from_variable = {TNO_next_barracks_satisfaction = TNO_barracks_satisfaction}

		multiply_variable = { TNO_barracks_satisfaction = 100  }


		set_temp_variable = {offices_PE = 1}
		add_to_temp_variable = {offices_PE = modifier@offices_PE_modifier}
		multiply_temp_variable = {TNO_offices_calculation = offices_PE}
		
		divide_temp_variable = { TNO_offices_calculation = TNO_offices_total_needed } 

		set_temp_variable = { input = TNO_offices_calculation } #Calculate Satisfaction for this building type
		calculate_satisfaction_formula = yes
		set_variable = { TNO_offices_satisfaction = output  }

		set_variable = {TNO_next_offices_satisfaction = offices_PE}  #Calculate Satisfaction as if next building has already been built, then subtract current satisfaction value
		divide_variable = {TNO_next_offices_satisfaction = TNO_offices_total_needed}
		add_to_variable = {TNO_next_offices_satisfaction = TNO_offices_calculation}
		set_temp_variable = {input = TNO_next_offices_satisfaction}		
		calculate_satisfaction_formula = yes
		set_variable = {TNO_next_offices_satisfaction = output}
		subtract_from_variable = {TNO_next_offices_satisfaction = TNO_offices_satisfaction}

		multiply_variable = { TNO_offices_satisfaction = 100  }
	}
}

calculate_satisfaction_formula = {

	# input: num_buildings_built/num_buildings_demand #output
	# a = 0.321
	# b = 1.501
	# c = 0.460
	# output b\cdot\frac{\left(x+0.5\right)^{3}}{\left(x+0.5\right)^{3}+c}-a

	if = {
		limit = { check_variable = { input < 1 } }

		set_temp_variable = { input_temp = input }
		add_to_temp_variable = { input_temp = 0.5 }
		set_temp_variable = { curve_calc_enumerator = input_temp }
		
		multiply_temp_variable = { curve_calc_enumerator = input_temp } #^2
		multiply_temp_variable = { curve_calc_enumerator = input_temp } #^3

		set_temp_variable = { curve_calc_denominator = curve_calc_enumerator }
		add_to_temp_variable = { curve_calc_denominator = 0.460 }

		set_temp_variable = { output = curve_calc_enumerator }
		divide_temp_variable = { output = curve_calc_denominator }
		multiply_temp_variable = { output = 1.501 }
		subtract_from_temp_variable = { output = 0.321 }
	} else = {
		set_temp_variable = { output = 1 } 
	}

	clamp_temp_variable = { var = output min = 0 max = 1 }
}
